generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Organization {
  id                      String      @id @default(uuid()) @unique 
  name                    String?      @db.VarChar(255)          
  address                 String?      @db.VarChar(255)          
  email                   String       @db.VarChar(255)   @unique                       
  phone                   String?      @db.VarChar(255)                         
  postalCode              String?      @db.VarChar(255)  
  city                    String?      @db.VarChar(255)  
  country                 String?      @db.VarChar(255)  
  website                 String?      @db.VarChar(255)
  taxID                   String?      @db.VarChar(255)
  isFilledByOrg           Boolean      @default(false)
  bankDetailsId           String?      @unique
  users                   User[] @relation("OrganizationUsers") // Many-to-Many relation
  teamId                  String?     
  team                    Teams?              @relation(fields: [teamId], references: [id])   
  bankDetails             BankDetails?        @relation(fields: [bankDetailsId], references: [id])
  fundingRequests         FundingRequest[]                
  Files                   File[]                    
  donationAgreements      DonationAgreement[]
  

  createdAt               DateTime    @default(now()) @db.Timestamptz(6) 
  updatedAt               DateTime    @updatedAt @db.Timestamptz(6) 


  Transaction Transaction[]
}


model BankDetails {
  id              String     @id @default(uuid()) @unique       
  bankName        String     @db.VarChar(255)                  
  accountHolder   String     @db.VarChar(255)                  
  iban            String     @db.VarChar(255)     @unique                
  bic             String     @db.VarChar(255)                
  createdAt       DateTime @default(now()) @db.Timestamptz(6) 
  updatedAt       DateTime @updatedAt @db.Timestamptz(6) 
  organization    Organization? @relation
  teams           Teams? @relation 
}



enum FundingStatus {
  Submitted
  Accepted
  WaitingForSignature
  Approved
  FundsDisbursing
  Completed
  Rejected


  // remove below
  UnderReview
  Pending
  Processing 
  FundsTransferred
}
model FundingRequest {
  id                        String    @id @default(uuid()) @unique   
  name                      String      @db.VarChar(255) 
  organizationId            String                                
  organization              Organization @relation(fields: [organizationId], references: [id])
  description               String       @db.Text                   
  purpose                   String       @db.Text
  amountRequested           Decimal                                 
  amountAgreed              Decimal?                              
  remainingAmount           Decimal?    
  refinancingConcept        String       @db.Text
  sustainability            String       @db.Text
  expectedCompletionDate    DateTime                               
  status                    FundingStatus @default(Submitted)   
  submittedById             String           
  submittedBy               User? @relation(fields: [submittedById], references: [id])
  customFields              Json?                                  // Store dynamic field data as JSON
  createdAt                 DateTime @default(now()) @db.Timestamptz(6) 
  updatedAt                 DateTime @updatedAt @db.Timestamptz(6) 
  files                     File[]          
  teamId                    String?
  team                      Teams? @relation(fields: [teamId], references: [id])
  donationAgreement         DonationAgreement[]
  Transaction Transaction[]
}

model File {
  id          String    @id @default(uuid()) @unique 
  name        String?      @db.VarChar(255)  
  url         String      @unique
  type        String      @db.VarChar(255)                             
  createdBy   User @relation("CreatedByRelation", fields: [createdById], references: [id])
  createdById String                       
  updatedBy   User @relation("UpdatedByRelation", fields: [updatedById], references: [id])
  updatedById String               
  createdAt   DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime    @updatedAt @db.Timestamptz(6) 

  organizationId String?  @db.VarChar(255)  
  organization   Organization? @relation(fields: [organizationId], references: [id])  // One-to-Many relation
  fundingRequestId String?
  FundingRequest FundingRequest? @relation(fields: [fundingRequestId], references: [id])
  donationAgreement DonationAgreement[]


  Transaction Transaction[]
}

enum Roles {
  Organization
  Team
  Admin
}


model Teams {
  id          String           @id @default(uuid()) @unique
  name        String           @unique 
  email       String           @db.VarChar(255) @unique
  phone       String?          @db.VarChar(255)             
  address     String?          @db.VarChar(255)
  postalCode  String?          @db.VarChar(255)  
  city        String?          @db.VarChar(255)  
  country     String?          @db.VarChar(255)  
  website     String?          @db.VarChar(255)
  strategicPriorities String?  @db.Text

  bankDetailsId String?        @unique
  bankDetails   BankDetails?   @relation(fields: [bankDetailsId], references: [id])
  organizations Organization[]
  
  users     User[] @relation("TeamUsers") // Many-to-Many relation
  fundingRequests    FundingRequest[]
  donationAgreements DonationAgreement[]
  createdAt    DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime        @updatedAt @db.Timestamptz(6)

  emailTemplates emailTemplates[]
  formSections FormSection[]

  Transaction Transaction[]
}

model User {
  id             String           @id @default(uuid()) @unique 
  name           String?          @db.VarChar(255)          
  address        String?          @db.VarChar(255)          
  email          String           @db.VarChar(255) @unique         
  phone          String?          @db.VarChar(255)          
  postalCode     String?          @db.VarChar(255)  
  city           String?          @db.VarChar(255)  
  country        String?          @db.VarChar(255)                           
  roles          Roles[]
  emailVerified DateTime? 
  image         String?
  
  fundingRequests FundingRequest[]  
  teams           Teams[]          @relation("TeamUsers") // Many-to-Many relation
  organizations   Organization[]   @relation("OrganizationUsers") // Many-to-Many relation

  signedAgreements DonationAgreementSignature[]
  donationAgreement DonationAgreement[] @relation("CreatedByRelation")

  createdBy       File[]           @relation("CreatedByRelation") // One-to-Many relation
  updatedBy       File[]           @relation("UpdatedByRelation") // One-to-Many relation
  accounts      Account[]
  sessions      Session[]
 

  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime         @updatedAt @db.Timestamptz(6) 

}

model DonationAgreement {
  id               String    @id @default(uuid()) @unique
  fundingRequestId String
  fundingRequest   FundingRequest @relation(fields: [fundingRequestId], references: [id])

  fileId           String
  file             File      @relation(fields: [fileId], references: [id])
  agreement        String    @db.Text

  createdBy        User @relation("CreatedByRelation", fields: [createdById], references: [id])
  createdById      String
  userSignatures DonationAgreementSignature[]
  teamId           String?
  team             Teams? @relation(fields: [teamId], references: [id])
  organizationId           String?
  organization             Organization? @relation(fields: [organizationId], references: [id])

  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @updatedAt @db.Timestamptz(6)
}

model DonationAgreementSignature {
  donationAgreementId String
  userId              String
  signedAt            DateTime?  // If NULL, person hasn't signed

  donationAgreement DonationAgreement @relation(fields: [donationAgreementId], references: [id], onDelete: Cascade)
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([donationAgreementId, userId]) // Composite key to avoid duplicate signatures
}


model emailTemplates {
  id String @id @default(uuid()) @unique
  name String @db.VarChar(255)
  subject String @db.VarChar(255)
  content String @db.Text
  type String @db.VarChar(255)
  isActive Boolean @default(true)
  teamId String?
  team Teams? @relation( fields: [teamId],references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  
}

enum FieldType {
  TEXT
  TEXTAREA
  NUMBER
  DATE
  EMAIL
  URL
  SELECT
  MULTISELECT
  CHECKBOX
  RADIO
  FILE
}

model FormSection {
  id String @id @default(uuid()) @unique
  name String @db.VarChar(255)
  description String? @db.Text
  order Int
  teamId String?
  team Teams? @relation(fields: [teamId], references: [id], onDelete: Cascade)
  fields FormField[]
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
}

model FormField {
  id String @id @default(uuid()) @unique
  key String @db.VarChar(255)
  label String @db.VarChar(255)
  description String? @db.Text
  type FieldType
  placeholder String? @db.VarChar(255)
  defaultValue String? @db.Text
  isRequired Boolean @default(false)
  order Int
  
  // Validation rules
  minLength Int?
  maxLength Int?
  minValue Decimal?
  maxValue Decimal?
  pattern String? @db.VarChar(255)
  
  // Select/Radio options (JSON array of {label: string, value: string})
  options Json?
  
  sectionId String
  section FormSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  
  @@unique([sectionId, key])
}




model Transaction {
  id String @id @default(uuid()) @unique
  amount Decimal
  totalAmount Decimal
  remainingAmount Decimal
  transactionReciept String? 
  fundingRequestId String
  fundingRequest FundingRequest @relation(fields: [fundingRequestId], references: [id])
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  teamId String
  
  team Teams @relation(fields: [teamId], references: [id])  
  file File? @relation(fields: [transactionReciept], references: [id], onDelete: SetNull, onUpdate: SetNull)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  
  type               String
  provider           String
  providerAccountId  String  
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique 
  userId       String  
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
}
 

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}